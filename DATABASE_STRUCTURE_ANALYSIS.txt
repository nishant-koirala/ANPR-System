ANPR SYSTEM DATABASE STRUCTURE ANALYSIS
========================================
Generated: 2025-08-28T13:45:45+05:45
Analysis based on executed migration and current codebase

OVERVIEW
========
The ANPR system uses a hybrid database structure combining:
1. Core ANPR functionality (SQLAlchemy models)
2. RBAC (Role-Based Access Control) system
3. Migration-added enhancements for image storage and audit trails

DATABASE TABLES BREAKDOWN
=========================

1. CORE ANPR TABLES (from models.py)
===================================

1.1 RAW_LOGS TABLE
------------------
Purpose: Stores every detection from camera/YOLO before filtering
Primary Key: raw_id (INTEGER, AUTOINCREMENT)

Columns:
- raw_id: INTEGER PRIMARY KEY AUTOINCREMENT
- camera_id: INTEGER, FK to cameras.camera_id, NOT NULL, INDEXED
- frame_id: VARCHAR(50), NOT NULL, INDEXED
- plate_text: VARCHAR(20), NOT NULL, INDEXED (OCR result, may be noisy)
- confidence: FLOAT, NOT NULL (Model confidence score)
- captured_at: DATETIME, NOT NULL, DEFAULT utcnow, INDEXED
- image_path: VARCHAR(255) (Stored image snapshot, optional)
- plate_image_path: VARCHAR(500) (Cropped plate image path)
- thumbnail_path: VARCHAR(500) (Thumbnail image path)
- image_width: INTEGER (Plate image width)
- image_height: INTEGER (Plate image height)
- image_size: INTEGER (File size in bytes)
- bbox_x: FLOAT (Bounding box coordinates)
- bbox_y: FLOAT
- bbox_width: FLOAT
- bbox_height: FLOAT
- processing_time: FLOAT (Time taken for detection/OCR)

Relationships:
- camera: Many-to-One with cameras table
- vehicle_logs: One-to-Many with vehicle_log table

Indexes:
- idx_raw_logs_camera_time: (camera_id, captured_at)
- idx_raw_logs_plate_time: (plate_text, captured_at)
- idx_raw_logs_plate_image: (plate_image_path)

1.2 VEHICLE_LOG TABLE
--------------------
Purpose: Filtered, toggled entry/exit records with enhanced editing capabilities
Primary Key: log_id (INTEGER, AUTOINCREMENT)

Columns:
- log_id: INTEGER PRIMARY KEY AUTOINCREMENT
- plate_number: VARCHAR(20), NOT NULL, INDEXED (Cleaned plate number)
- vehicle_id: INTEGER, FK to vehicles.vehicle_id, NULLABLE, INDEXED
- toggle_mode: ENUM(ToggleMode), NOT NULL, INDEXED (ENTRY or EXIT)
- captured_at: DATETIME, NOT NULL, INDEXED
- raw_ref: INTEGER, FK to raw_logs.raw_id, NOT NULL
- session_id: VARCHAR(50) (To group related entry/exit events)
- duration_minutes: INTEGER (For EXIT records, duration since ENTRY)
- location_info: VARCHAR(255) (Additional location context)
- notes: TEXT (Additional notes or flags)

EDITING FIELDS (Added by migration):
- original_plate_number: VARCHAR(20) (Original OCR result before editing)
- is_edited: BOOLEAN, DEFAULT FALSE (Flag indicating if plate was edited)
- edited_by: INTEGER, FK to users.user_id, NULLABLE (User who edited)
- edited_at: DATETIME, NULLABLE (When the edit was made)
- edit_reason: TEXT (Reason for the edit)

IMAGE FIELDS:
- plate_image_path: VARCHAR(500) (Path to full plate image)
- thumbnail_path: VARCHAR(500) (Path to thumbnail image)
- image_width: INTEGER (Image width in pixels)
- image_height: INTEGER (Image height in pixels)
- image_size: INTEGER (File size in bytes)

Relationships:
- vehicle: Many-to-One with vehicles table
- raw_log: Many-to-One with raw_logs table
- editor: Many-to-One with users table (for edited_by)
- edit_history: One-to-Many with plate_edit_history table

Indexes:
- idx_vehicle_log_plate_toggle: (plate_number, toggle_mode)
- idx_vehicle_log_time_toggle: (captured_at, toggle_mode)
- idx_vehicle_log_edited: (is_edited)
- idx_vehicle_log_editor: (edited_by)

1.3 VEHICLES TABLE
------------------
Purpose: Vehicle registry with plate numbers
Primary Key: vehicle_id (INTEGER, AUTOINCREMENT)

Columns:
- vehicle_id: INTEGER PRIMARY KEY AUTOINCREMENT
- plate_number: VARCHAR(20), UNIQUE, NOT NULL, INDEXED
- vehicle_type: VARCHAR(50) (car, truck, motorcycle, etc.)
- owner_info: TEXT (JSON or text field for owner details)
- is_blacklisted: INTEGER, DEFAULT 0 (0 for normal, 1 for blacklisted)
- created_at: DATETIME, DEFAULT utcnow
- updated_at: DATETIME, DEFAULT utcnow, ON UPDATE utcnow

Relationships:
- vehicle_logs: One-to-Many with vehicle_log table

1.4 CAMERAS TABLE
-----------------
Purpose: Camera information and locations
Primary Key: camera_id (INTEGER, AUTOINCREMENT)

Columns:
- camera_id: INTEGER PRIMARY KEY AUTOINCREMENT
- camera_name: VARCHAR(100), NOT NULL
- location: VARCHAR(255)
- is_active: INTEGER, DEFAULT 1 (1 for active, 0 for inactive)
- created_at: DATETIME, DEFAULT utcnow

Relationships:
- raw_logs: One-to-Many with raw_logs table

2. RBAC SYSTEM TABLES (from rbac_models.py)
==========================================

2.1 USERS TABLE (RBAC Version)
------------------------------
Purpose: System users for authentication and audit trail
Primary Key: user_id (INTEGER, AUTOINCREMENT)

Columns:
- user_id: INTEGER PRIMARY KEY AUTOINCREMENT
- username: VARCHAR(50), UNIQUE, NOT NULL, INDEXED
- password_hash: VARCHAR(255), NOT NULL
- email: VARCHAR(100), UNIQUE, NOT NULL
- full_name: VARCHAR(100), NULLABLE
- status: ENUM(UserStatus), DEFAULT ACTIVE, NOT NULL
  * UserStatus: ACTIVE, INACTIVE, SUSPENDED
- last_login: DATETIME, NULLABLE
- failed_login_attempts: INTEGER, DEFAULT 0
- created_at: DATETIME, DEFAULT utcnow, NOT NULL
- updated_at: DATETIME, DEFAULT utcnow, ON UPDATE utcnow
- created_by: INTEGER, FK to users.user_id, NULLABLE

Relationships:
- user_roles: One-to-Many with user_roles table
- created_users: One-to-Many with users table (self-referencing)

Index:
- idx_users_username: (username)

2.2 ROLES TABLE
---------------
Purpose: System roles definition
Primary Key: role_id (INTEGER, AUTOINCREMENT)

Columns:
- role_id: INTEGER PRIMARY KEY AUTOINCREMENT
- role_name: VARCHAR(50), UNIQUE, NOT NULL, INDEXED
- description: VARCHAR(200), NULLABLE
- is_system_role: BOOLEAN, DEFAULT FALSE (Cannot be deleted if True)
- created_at: DATETIME, DEFAULT utcnow, NOT NULL

Relationships:
- role_permissions: One-to-Many with role_permissions table
- user_roles: One-to-Many with user_roles table

Default Roles:
- SUPERADMIN: Full system access
- ADMIN: Administrative access
- OPERATOR: Operational access
- VIEWER: Read-only access

2.3 PERMISSIONS TABLE
--------------------
Purpose: System permissions definition
Primary Key: permission_id (INTEGER, AUTOINCREMENT)

Columns:
- permission_id: INTEGER PRIMARY KEY AUTOINCREMENT
- permission_name: VARCHAR(100), UNIQUE, NOT NULL, INDEXED
- description: VARCHAR(200), NULLABLE
- category: VARCHAR(50), NULLABLE (Group related permissions)
- is_system_permission: BOOLEAN, DEFAULT FALSE (Cannot be deleted if True)
- created_at: DATETIME, DEFAULT utcnow, NOT NULL

Relationships:
- role_permissions: One-to-Many with role_permissions table

Permission Categories:
- System: MANAGE_USERS, MANAGE_ROLES, MANAGE_PERMISSIONS, VIEW_AUDIT_LOGS, SYSTEM_CONFIG
- ANPR: VIEW_DASHBOARD, VIEW_VEHICLE_LOGS, DELETE_VEHICLE_LOGS, EXPORT_DATA
- Camera: CONFIG_CAMERAS, VIEW_CAMERA_STATUS
- Database: VIEW_DATABASE, MANAGE_DATABASE, BACKUP_DATABASE
- Settings: MODIFY_SETTINGS, VIEW_SETTINGS

2.4 ROLE_PERMISSIONS TABLE
--------------------------
Purpose: Role-Permission mapping (Many-to-Many)
Primary Key: rp_id (INTEGER, AUTOINCREMENT)

Columns:
- rp_id: INTEGER PRIMARY KEY AUTOINCREMENT
- role_id: INTEGER, FK to roles.role_id, ON DELETE CASCADE, NOT NULL
- permission_id: INTEGER, FK to permissions.permission_id, ON DELETE CASCADE, NOT NULL
- granted_at: DATETIME, DEFAULT utcnow, NOT NULL
- granted_by: INTEGER, FK to users.user_id, NULLABLE

Relationships:
- role: Many-to-One with roles table
- permission: Many-to-One with permissions table
- granter: Many-to-One with users table

2.5 USER_ROLES TABLE
--------------------
Purpose: User-Role mapping (Many-to-Many)
Primary Key: ur_id (INTEGER, AUTOINCREMENT)

Columns:
- ur_id: INTEGER PRIMARY KEY AUTOINCREMENT
- user_id: INTEGER, FK to users.user_id, ON DELETE CASCADE, NOT NULL
- role_id: INTEGER, FK to roles.role_id, ON DELETE CASCADE, NOT NULL
- assigned_at: DATETIME, DEFAULT utcnow, NOT NULL
- assigned_by: INTEGER, FK to users.user_id, NULLABLE
- expires_at: DATETIME, NULLABLE (Optional role expiration)

Relationships:
- user: Many-to-One with users table
- role: Many-to-One with roles table
- assigner: Many-to-One with users table

2.6 USER_SESSIONS TABLE
-----------------------
Purpose: Track user login sessions
Primary Key: session_id (VARCHAR(128))

Columns:
- session_id: VARCHAR(128) PRIMARY KEY
- user_id: INTEGER, FK to users.user_id, ON DELETE CASCADE, NOT NULL
- login_time: DATETIME, DEFAULT utcnow, NOT NULL
- logout_time: DATETIME, NULLABLE
- ip_address: VARCHAR(45), NULLABLE (IPv4/IPv6)
- user_agent: TEXT, NULLABLE
- is_active: BOOLEAN, DEFAULT TRUE

Relationships:
- user: Many-to-One with users table

2.7 AUDIT_LOGS TABLE
--------------------
Purpose: Audit trail for security-sensitive operations
Primary Key: log_id (INTEGER, AUTOINCREMENT)

Columns:
- log_id: INTEGER PRIMARY KEY AUTOINCREMENT
- user_id: INTEGER, FK to users.user_id, NULLABLE
- action: VARCHAR(100), NOT NULL (LOGIN, LOGOUT, CREATE_USER, etc.)
- resource_type: VARCHAR(50), NULLABLE (USER, ROLE, PERMISSION, etc.)
- resource_id: VARCHAR(50), NULLABLE
- details: TEXT, NULLABLE (JSON details)
- ip_address: VARCHAR(45), NULLABLE
- timestamp: DATETIME, DEFAULT utcnow, NOT NULL
- success: BOOLEAN, DEFAULT TRUE

Relationships:
- user: Many-to-One with users table

3. MIGRATION-ADDED TABLES
=========================

3.1 PLATE_IMAGES TABLE (from migration)
---------------------------------------
Purpose: Normalized image table for plate images
Primary Key: image_id (INTEGER, AUTOINCREMENT)

Columns:
- image_id: INTEGER PRIMARY KEY AUTOINCREMENT
- log_id: INTEGER, NOT NULL
- log_type: TEXT, NOT NULL, CHECK(log_type IN ('RAW', 'VEHICLE'))
- image_path: VARCHAR(500)
- thumbnail_path: VARCHAR(500)
- width: INTEGER
- height: INTEGER
- size: INTEGER

Foreign Keys:
- log_id references vehicle_log(log_id) ON DELETE CASCADE

Note: This table was created by migration but may not be actively used as image data is stored directly in raw_logs and vehicle_log tables.

3.2 PLATE_EDIT_HISTORY TABLE
----------------------------
Purpose: Audit trail for plate number edits
Primary Key: edit_id (INTEGER, AUTOINCREMENT)

Columns:
- edit_id: INTEGER PRIMARY KEY AUTOINCREMENT
- log_id: INTEGER, FK to vehicle_log.log_id, NOT NULL, INDEXED
- old_plate_number: VARCHAR(20), NOT NULL
- new_plate_number: VARCHAR(20), NOT NULL
- edited_by: INTEGER, FK to users.user_id, NOT NULL, INDEXED
- editor_role: VARCHAR(20)
- edited_at: DATETIME, DEFAULT CURRENT_TIMESTAMP
- edit_reason: TEXT
- ip_address: VARCHAR(45)
- user_agent: TEXT

Relationships:
- vehicle_log: Many-to-One with vehicle_log table
- editor: Many-to-One with users table

Indexes:
- idx_edit_history_log: (log_id)
- idx_edit_history_user: (edited_by)
- idx_edit_history_date: (edited_at)

4. DATABASE CONSTRAINTS AND RELATIONSHIPS
=========================================

Foreign Key Relationships:
- raw_logs.camera_id → cameras.camera_id
- vehicle_log.vehicle_id → vehicles.vehicle_id
- vehicle_log.raw_ref → raw_logs.raw_id
- vehicle_log.edited_by → users.user_id
- plate_edit_history.log_id → vehicle_log.log_id
- plate_edit_history.edited_by → users.user_id
- user_roles.user_id → users.user_id
- user_roles.role_id → roles.role_id
- role_permissions.role_id → roles.role_id
- role_permissions.permission_id → permissions.permission_id
- user_sessions.user_id → users.user_id
- audit_logs.user_id → users.user_id

Check Constraints:
- plate_images.log_type IN ('RAW', 'VEHICLE')
- users.status IN ('ACTIVE', 'INACTIVE', 'SUSPENDED')

5. PERFORMANCE OPTIMIZATIONS
============================

Composite Indexes:
- idx_raw_logs_camera_time: (camera_id, captured_at)
- idx_raw_logs_plate_time: (plate_text, captured_at)
- idx_vehicle_log_plate_toggle: (plate_number, toggle_mode)
- idx_vehicle_log_time_toggle: (captured_at, toggle_mode)

Single Column Indexes:
- All primary keys (automatic)
- cameras.camera_id, raw_logs.camera_id, raw_logs.frame_id, raw_logs.plate_text, raw_logs.captured_at
- vehicles.plate_number, vehicle_log.plate_number, vehicle_log.vehicle_id, vehicle_log.toggle_mode, vehicle_log.captured_at
- users.username, roles.role_name, permissions.permission_name
- plate_edit_history.log_id, plate_edit_history.edited_by, plate_edit_history.edited_at
- vehicle_log.is_edited, vehicle_log.edited_by
- raw_logs.plate_image_path

6. DATA FLOW AND TOGGLE LOGIC
=============================

Detection Flow:
1. Camera detects vehicle → raw_logs (every detection)
2. Toggle manager processes → vehicle_log (filtered ENTRY/EXIT)
3. Image processor saves → plate images stored in both tables
4. User edits → plate_edit_history + vehicle_log.is_edited = TRUE

Toggle Mode Logic:
- First detection: ENTRY
- Subsequent detections: Toggle between ENTRY/EXIT
- Cooldown period: 5 minutes (configurable)
- Similarity matching: 80% threshold for EXIT matching to similar ENTRY plates
- Confidence filtering: 0.7 minimum (configurable)

7. SECURITY AND AUDIT FEATURES
==============================

Authentication:
- bcrypt password hashing
- Session-based authentication with 24-hour expiry
- Failed login attempt tracking (5 attempts = suspension)
- IP address and user agent logging

Authorization:
- Role-Based Access Control (RBAC)
- Granular permissions system
- Role inheritance and expiration support
- Permission categories for organized access control

Audit Trail:
- All user actions logged in audit_logs
- Plate edit history with full audit trail
- Session tracking with login/logout times
- IP address and user agent capture

8. MIGRATION IMPACT ANALYSIS
============================

Successfully Applied Changes:
✅ Enhanced users table with RBAC fields
✅ Added plate_images table (normalized storage)
✅ Added editing fields to vehicle_log table
✅ Created plate_edit_history audit table
✅ Added performance indexes
✅ Created default admin user with bcrypt password

Current Database State:
- Hybrid structure combining original ANPR models with RBAC system
- Full audit trail capabilities for plate edits
- Image storage integrated into detection pipeline
- Secure user management with role-based permissions
- Performance optimized with comprehensive indexing

Potential Issues Identified:
- Dual user table definitions (models.py vs rbac_models.py)
- plate_images table may be redundant (images stored in raw_logs/vehicle_log)
- Some foreign key references may need alignment between model systems

9. RECOMMENDATIONS
==================

Immediate Actions:
1. Consolidate user table definitions to avoid conflicts
2. Verify all foreign key relationships are properly established
3. Consider removing redundant plate_images table if not actively used
4. Ensure all models use the same Base declarative class

Performance Monitoring:
- Monitor query performance on large datasets
- Consider partitioning strategies for raw_logs table
- Implement data archival strategy for old records

Security Enhancements:
- Regular audit log review procedures
- Password policy enforcement
- Session timeout configuration
- Rate limiting for login attempts

Data Integrity:
- Regular database consistency checks
- Backup and recovery procedures
- Data validation rules enforcement
- Referential integrity monitoring

CONCLUSION
==========
The ANPR system database structure is comprehensive and well-designed for handling:
- High-volume vehicle detection logging
- Secure user management with RBAC
- Complete audit trails for data modifications
- Efficient querying with proper indexing
- Image storage integration

The migration has successfully enhanced the system with editing capabilities,
normalized image storage, and robust security features while maintaining
backward compatibility with existing ANPR functionality.
